version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string  
    steps:
      - run:
          name: Destroy environments (backend)
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name udapeople-backend-<<parameters.workflow_id>>
      - run:
          name: Destroy environments (frontend)
          command: |
            # aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive 
            aws cloudformation delete-stack \
              --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id: 
        type: string   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl --insecure https://kvdb.io/EjdPtF7S5jBwvP7vnZGMhi/migration_<<parameters.workflow_id>>) 
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test the frontend
          command: |
            cd frontend
            npm install
            npm run test   

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test the backend
          command: |
            cd backend
            npm install
            npm run test   
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Scan / Audit FRONTEND
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan / Audit BACKEND
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt > ~/inventory.txt
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: ["b3:3d:d4:20:e5:6b:d1:9f:09:17:52:a7:44:70:93:55"] 
      - run:
          name: Install dependences
          command: |
            yum update -y 
            yum install -y python3 curl tar gzip openssh-clients
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3 get-pip.py --user
            python3 -m pip install --user ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            export PATH=$PATH:~/.local/bin
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run --force migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/UYCsQnQRXH2EAPU9svtRhn/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
            echo "**************** After Migration **********************"
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y python3 curl tar gzip nodejs
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3 get-pip.py --user
            python3 -m pip install --user ansible
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            node --verison 
            npm --version
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            aws --version
            echo "******* Checking EC2 IP ********"
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> ip.txt
            echo "******* Done Checking EC2 IP ********"
            export BACKEND_IP=$(cat ip.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL = "http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environments:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
                    
  # deploy-backend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #           fingerprints: ["b3:3d:d4:20:e5:6b:d1:9f:09:17:52:a7:44:70:93:55"] 
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum update -y
  #           yum install -y python3 curl tar gzip openssh-clients nodejs
  #           curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
  #           python3 get-pip.py --user
  #           python3 -m pip install --user ansible
  #           curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
  #           node --verison 
  #           npm --version      
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #           cd ..
  #           tar -C backend -czvf artifact.tar.gz .
  #           mkdir ~/project/.circleci/ansible/roles/deploy/files
  #           echo "**** FILES WORKING DIRECTORY ****"
  #           cd ~/project/.circleci/ansible/roles/deploy/files
  #           pwd
  #           echo "**** ls in root DIR ****"
  #           ls -l
  #           export PATH=$PATH:~/.local/bin
  #           ansible --version
  #           cd .circleci/ansible
  #           echo "Contents of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # smoke-test:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum update -y
  #           yum install -y tar gzip nodejs
  #           curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Get backend url
  #         command: |
  #           echo "******* Checking EC2 IP ********"
  #           aws ec2 describe-instances \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --filters "Name=tag,Values=udapeople"
  #             --output text >> ip.text
  #             cat ip.txt
  #             export BACKEND_IP=$(cat ip.txt)
  #             export API_URL="http:${BACKEND_IP}:3030"
  #             echo "${API_URL}"
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           if curl "${API_URL}/api/status" | grep "ok"
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
  #           echo ${URL}
  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #             exit 0
  #           else 
  #             exit 1
  #           fi
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum upgrade -y
  #           yum install -y tar gzip
  #     - attach-workspace:
  #         at: ~/
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           echo "************ Update Old Workflow ID to kvdb"
  #           export OLD_WORKFLOW_ID=$(aws cloudformation list-exports \
  #             --query "Exports[?Name==\`WorkflowID`].Value" \
  #             --no-paginate
  #             --output text )
  #           echo "Old Workflow ID: $OLD_WORLFLOW_ID"
  #           curl https://kvdb.io/EjdPtF7S5jBwvP7vnZGMhi/old_workflow_id -d "${OLD_WORKFLOW_ID"
  #           export cloudformation deploy \
  #             --template-name .circleci/files/cloudfront.yml \
  #             --stack-name InititalStack \
  #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --tags project=udapeople
  #     - destroy-environments:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations: 
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

# cleanup:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID=$(curl --insecure https://kvdb.io/EjdPtF7S5jBwvP7vnZGMhi/old_workflow_id)
#             export STACKS=($(aws cloudformations list-stacks 
#               --query "StackSummaries[*].StackName" \
#               --stack-status-filter CREATE_COMPLETE
#               --no-paginate
#               --output text))
#             echo Stack Names: "${STACKS[@]}
#             echo Old Workflow ID: $OldWorkflowID
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               echo "************* Deleting Stack **************"
#               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]